/**
 * üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –ø–∞–ø–æ–∫
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: loadPhotoGallery('fashion') - –∑–∞–≥—Ä—É–∑–∏—Ç —Ñ–æ—Ç–∫–∏ –∏–∑ /images/fashion/
 */

class PhotoGallery {
  constructor() {
    this.imageExtensions = [".jpg", ".jpeg", ".png", ".webp", ".gif"];
    this.galleries = new Map(); // –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–π
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏
   */
  clearCache(category = null) {
    if (category) {
      this.galleries.delete(category);
      console.log(`üóëÔ∏è –ö—ç—à –≥–∞–ª–µ—Ä–µ–∏ ${category} –æ—á–∏—â–µ–Ω`);
    } else {
      this.galleries.clear();
      console.log(`üóëÔ∏è –í–µ—Å—å –∫—ç—à –≥–∞–ª–µ—Ä–µ–π –æ—á–∏—â–µ–Ω`);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ç–∫–∏ –≤ –ø–∞–ø–∫–µ
   * @param {string} category - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (fashion, e-commerce, etc.)
   * @returns {Promise<string[]>} - –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
   */
  async discoverImages(category) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API
      const images = await this.getImageListFromServer(category);
      if (images.length > 0) {
        return images;
      }
    } catch (error) {
      // –¢–∏—Ö–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    }

    // –§–∞–ª–ª–±—ç–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const imagePaths = await this.discoverByPatterns(category);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const validImages = [];
    for (const imagePath of imagePaths) {
      if (await this.imageExists(imagePath)) {
        validImages.push(imagePath);
      }
    }

    return validImages;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API/—Å–µ—Ä–≤–µ—Ä
   */
  async getImageListFromServer(category) {
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ dev —Ä–µ–∂–∏–º–µ —Å Vite)
      const response = await fetch(`/images/${category}/`, {
        method: "GET",
        headers: { Accept: "application/json, text/html" },
      });

      if (response.ok && response.status === 200) {
        const text = await response.text();

        // –ü–∞—Ä—Å–∏–º HTML –æ—Ç–≤–µ—Ç (Vite –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ)
        if (
          text.includes("<a href=") &&
          text.includes(".jpg" || ".jpeg" || ".png")
        ) {
          const images = this.parseFileListFromHTML(text, category);
          if (images.length > 0) {
            return images;
          }
        }
      }
    } catch (error) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }

    return [];
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ HTML –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
   */
  parseFileListFromHTML(html, category) {
    const images = [];
    const baseUrl = `/images/${category}/`;

    // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã
    const linkRegex = /<a href="([^"]+)"/g;
    let match;

    while ((match = linkRegex.exec(html)) !== null) {
      const filename = match[1];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (this.isImageFile(filename) && !filename.includes("README")) {
        images.push(baseUrl + filename);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    return images.sort(this.naturalSort);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  isImageFile(filename) {
    const ext = filename.toLowerCase().split(".").pop();
    return this.imageExtensions.some((imgExt) => imgExt.slice(1) === ext);
  }

  /**
   * –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (1, 2, 10 –≤–º–µ—Å—Ç–æ 1, 10, 2)
   */
  naturalSort(a, b) {
    return a.localeCompare(b, undefined, {
      numeric: true,
      sensitivity: "base",
    });
  }

  /**
   * –§–∞–ª–ª–±—ç–∫: –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
   */
  async discoverByPatterns(category) {
    const imagePaths = [];
    const baseUrl = `/images/${category}/`;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const commonPatterns = [
      { name: (i) => `${category}_${String(i).padStart(2, "0")}`, ext: ".jpg" }, // fashion_01.jpg
      { name: (i) => `${category}${String(i).padStart(2, "0")}`, ext: ".jpg" }, // fashion01.jpg
      { name: (i) => `${i}`, ext: ".jpg" }, // 1.jpg
    ];

    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for (const pattern of commonPatterns) {
      const fullPattern = (i) => pattern.name(i) + pattern.ext;
      const foundImages = await this.checkPatternSmart(
        baseUrl,
        fullPattern,
        category
      );

      if (foundImages.length > 0) {
        return foundImages;
      }
    }

    // –ï—Å–ª–∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const namePatterns = [
      (i) => `${category}_${i}`, // fashion_1
      (i) => `${category}${i}`, // fashion1
      (i) => `img_${String(i).padStart(2, "0")}`, // img_01
      (i) => `${String(i).padStart(2, "0")}`, // 01
    ];

    for (const namePattern of namePatterns) {
      for (const ext of this.imageExtensions) {
        const fullPattern = (i) => namePattern(i) + ext;
        const foundImages = await this.checkPatternSmart(
          baseUrl,
          fullPattern,
          category
        );

        if (foundImages.length > 0) {
          return foundImages;
        }
      }
    }

    return imagePaths;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategoryLimit(category) {
    const limits = {
      fashion: 9,
      "e-commerce": 10,
      events: 10,
      magazine: 10,
      reportage: 10,
      personal: 10,
      interior: 10,
      food: 10,
      product: 10,
      bts: 10,
    };

    return limits[category] || 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
  }

  /**
   * –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–æ–ø—É—Å–∫–µ –∏–ª–∏ –ª–∏–º–∏—Ç–µ
   */
  async checkPatternSmart(baseUrl, pattern, category) {
    const images = [];
    let i = 1;
    const limit = this.getCategoryLimit(category);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã
    while (i <= limit) {
      const imagePath = baseUrl + pattern(i);

      if (await this.imageExists(imagePath)) {
        images.push(imagePath);
      } else {
        // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        break;
      }

      i++;
    }

    return images;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async imageExists(url) {
    try {
      const response = await fetch(url, { method: "HEAD" });
      return response.ok;
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getCategoryDisplayName(category) {
    const displayNames = {
      fashion: "photos",
      "e-commerce": "photos",
      events: "photos",
      magazine: "photos",
      reportage: "photos",
      personal: "photos",
      interior: "photos",
      food: "photos",
      product: "photos",
      bts: "photos",
    };

    return (
      displayNames[category] ||
      category.charAt(0).toUpperCase() + category.slice(1)
    );
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥—Ä–æ–ø–¥–∞—É–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  createCategoryDropdown(currentCategory) {
    const categories = [
      { key: "fashion", label: "fashion" },
      { key: "e-commerce", label: "e-commerce" },
      { key: "events", label: "events" },
      { key: "magazine", label: "magazine" },
      { key: "reportage", label: "reportage" },
      { key: "personal", label: "personal" },
      { key: "interior", label: "interior" },
      { key: "food", label: "food" },
      { key: "product", label: "product" },
      { key: "bts", label: "bts" },
    ];

    const dropdownWrapper = document.createElement("div");
    dropdownWrapper.className = "dropdown-wrapper";

    const dropdown = document.createElement("select");
    dropdown.className = "category-dropdown";
    dropdown.value = currentCategory;

    categories.forEach((cat) => {
      const option = document.createElement("option");
      option.value = cat.key;
      option.textContent = cat.label;
      option.selected = cat.key === currentCategory;
      dropdown.appendChild(option);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dropdown.addEventListener("change", (e) => {
      const newCategory = e.target.value;
      window.location.href = `/pages/photos/${newCategory}.html`;
    });

    dropdownWrapper.appendChild(dropdown);
    return dropdownWrapper;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
   */
  createGalleryHTML(imagePaths, category) {
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueImages = [...new Set(imagePaths)];

    const galleryContainer = document.createElement("div");
    galleryContainer.className = "photo-gallery";
    galleryContainer.setAttribute("data-category", category);

    // –•–µ–¥–µ—Ä —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –¥—Ä–æ–ø–¥–∞—É–Ω–æ–º
    const header = document.createElement("div");
    header.className = "gallery-header";

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const title = document.createElement("h1");
    title.className = "gallery-title";
    title.textContent = this.getCategoryDisplayName(category);
    header.appendChild(title);

    // –î—Ä–æ–ø–¥–∞—É–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const dropdown = this.createCategoryDropdown(category);
    header.appendChild(dropdown);

    galleryContainer.appendChild(header);

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ
    const photosContainer = document.createElement("div");
    photosContainer.className = "photos-grid";

    uniqueImages.forEach((imagePath, index) => {
      const imageWrapper = document.createElement("div");
      imageWrapper.className = "photo-item";

      const img = document.createElement("img");
      img.src = imagePath;
      img.alt = `${category} photo ${index + 1}`;
      img.loading = "lazy";
      img.className = "gallery-image";

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      img.addEventListener("error", () => {
        imageWrapper.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
      img.addEventListener("click", () =>
        this.openLightbox(imagePath, uniqueImages, index)
      );

      imageWrapper.appendChild(img);
      photosContainer.appendChild(imageWrapper);
    });

    galleryContainer.appendChild(photosContainer);
    return galleryContainer;
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–∞–π—Ç–±–æ–∫—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  openLightbox(imagePath, allImages, currentIndex) {
    const lightbox = document.createElement("div");
    lightbox.className = "lightbox";

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∞–π—Ç–±–æ–∫—Å–∞
    const lightboxContent = document.createElement("div");
    lightboxContent.className = "lightbox-content";

    const closeButton = document.createElement("span");
    closeButton.className = "lightbox-close";
    closeButton.innerHTML = "&times;";

    const image = document.createElement("img");
    image.className = "lightbox-image";
    image.src = imagePath;
    image.alt = "Enlarged photo";

    const nav = document.createElement("div");
    nav.className = "lightbox-nav";

    const prevButton = document.createElement("button");
    prevButton.className = "lightbox-prev";
    prevButton.innerHTML = "‚Äπ";

    const counter = document.createElement("span");
    counter.className = "lightbox-counter";
    counter.textContent = `${currentIndex + 1} / ${allImages.length}`;

    const nextButton = document.createElement("button");
    nextButton.className = "lightbox-next";
    nextButton.innerHTML = "‚Ä∫";

    nav.appendChild(prevButton);
    nav.appendChild(counter);
    nav.appendChild(nextButton);

    lightboxContent.appendChild(closeButton);
    lightboxContent.appendChild(image);
    lightboxContent.appendChild(nav);
    lightbox.appendChild(lightboxContent);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const updateImage = (newIndex) => {
      if (newIndex >= 0 && newIndex < allImages.length) {
        currentIndex = newIndex;
        image.src = allImages[currentIndex];
        counter.textContent = `${currentIndex + 1} / ${allImages.length}`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
        prevButton.style.opacity = currentIndex > 0 ? "1" : "0.3";
        nextButton.style.opacity =
          currentIndex < allImages.length - 1 ? "1" : "0.3";
        prevButton.style.pointerEvents = currentIndex > 0 ? "auto" : "none";
        nextButton.style.pointerEvents =
          currentIndex < allImages.length - 1 ? "auto" : "none";
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    updateImage(currentIndex);

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–µ–ª–∫–∞–º
    prevButton.addEventListener("click", (e) => {
      e.stopPropagation();
      updateImage(currentIndex - 1);
    });

    nextButton.addEventListener("click", (e) => {
      e.stopPropagation();
      updateImage(currentIndex + 1);
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏—à–∞–º–∏
    const handleKeyPress = (e) => {
      if (e.key === "ArrowLeft") {
        updateImage(currentIndex - 1);
      } else if (e.key === "ArrowRight") {
        updateImage(currentIndex + 1);
      } else if (e.key === "Escape") {
        lightbox.remove();
        document.removeEventListener("keydown", handleKeyPress);
      }
    };

    document.addEventListener("keydown", handleKeyPress);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–∞–π—Ç–±–æ–∫—Å–∞
    closeButton.addEventListener("click", () => {
      lightbox.remove();
      document.removeEventListener("keydown", handleKeyPress);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) {
        lightbox.remove();
        document.removeEventListener("keydown", handleKeyPress);
      }
    });

    document.body.appendChild(lightbox);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
   */
  async loadGallery(category, containerId = "gallery-container") {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);

    // –í dev —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const useCache =
      !window.location.hostname.includes("localhost") &&
      !window.location.hostname.includes("127.0.0.1");

    if (useCache && this.galleries.has(category)) {
      console.log(`üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –¥–ª—è ${category}`);
      return this.galleries.get(category);
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const container = document.getElementById(containerId);
      if (!container) {
        console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å ID "${containerId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
      container.innerHTML =
        '<div class="gallery-loader">üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...</div>';

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagePaths = await this.discoverImages(category);

      if (imagePaths.length === 0) {
        container.innerHTML =
          '<div class="gallery-empty">üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
      }

      // –°–æ–∑–¥–∞–µ–º HTML –≥–∞–ª–µ—Ä–µ–∏
      const galleryHTML = this.createGalleryHTML(imagePaths, category);

      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
      container.innerHTML = "";
      container.appendChild(galleryHTML);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.galleries.set(category, imagePaths);

      console.log(`‚úÖ –ì–∞–ª–µ—Ä–µ—è "${category}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
      return imagePaths;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ ${category}:`, error);
      const container = document.getElementById(containerId);
      if (container) {
        container.innerHTML =
          '<div class="gallery-error">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>';
      }
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const photoGallery = new PhotoGallery();

/**
 * üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
 * @param {string} category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–æ—Ç–æ (fashion, e-commerce, etc.)
 * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'gallery-container')
 */
async function loadPhotoGallery(category, containerId = "gallery-container") {
  return await photoGallery.loadGallery(category, containerId);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
function autoLoadGallery() {
  const path = window.location.pathname;
  const categoryMatch = path.match(/\/photos\/([^/]+)\.html/);

  if (categoryMatch) {
    const category = categoryMatch[1];
    console.log(`üéØ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () =>
        loadPhotoGallery(category)
      );
    } else {
      loadPhotoGallery(category);
    }
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫—ç—à –≥–∞–ª–µ—Ä–µ–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ)
 */
function clearGalleryCache(category = null) {
  return photoGallery.clearCache(category);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.clearGalleryCache = clearGalleryCache;
window.photoGallery = photoGallery;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { photoGallery, loadPhotoGallery, autoLoadGallery, clearGalleryCache };
